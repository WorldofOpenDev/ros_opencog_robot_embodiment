// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencog_msgs.pai_msgs.proto

#ifndef PROTOBUF_opencog_5fmsgs_2epai_5fmsgs_2eproto__INCLUDED
#define PROTOBUF_opencog_5fmsgs_2epai_5fmsgs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace opencog_msgs {
namespace pai_msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();
void protobuf_AssignDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();
void protobuf_ShutdownFile_opencog_5fmsgs_2epai_5fmsgs_2eproto();

class MapInfo;
class MapInfo_Vector3;
class MapInfo_Rotation;
class MapInfo_OCProperty;
class MapInfoSeq;
class Chunk;

// ===================================================================

class MapInfo_Vector3 : public ::google::protobuf::Message {
 public:
  MapInfo_Vector3();
  virtual ~MapInfo_Vector3();
  
  MapInfo_Vector3(const MapInfo_Vector3& from);
  
  inline MapInfo_Vector3& operator=(const MapInfo_Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapInfo_Vector3& default_instance();
  
  void Swap(MapInfo_Vector3* other);
  
  // implements Message ----------------------------------------------
  
  MapInfo_Vector3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapInfo_Vector3& from);
  void MergeFrom(const MapInfo_Vector3& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1 [default = 0];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2 [default = 0];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float z = 3 [default = 0];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // @@protoc_insertion_point(class_scope:opencog_msgs.pai_msgs.MapInfo.Vector3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float z_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  
  void InitAsDefaultInstance();
  static MapInfo_Vector3* default_instance_;
};
// -------------------------------------------------------------------

class MapInfo_Rotation : public ::google::protobuf::Message {
 public:
  MapInfo_Rotation();
  virtual ~MapInfo_Rotation();
  
  MapInfo_Rotation(const MapInfo_Rotation& from);
  
  inline MapInfo_Rotation& operator=(const MapInfo_Rotation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapInfo_Rotation& default_instance();
  
  void Swap(MapInfo_Rotation* other);
  
  // implements Message ----------------------------------------------
  
  MapInfo_Rotation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapInfo_Rotation& from);
  void MergeFrom(const MapInfo_Rotation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float pitch = 1 [default = 0];
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 1;
  inline float pitch() const;
  inline void set_pitch(float value);
  
  // required float roll = 2 [default = 0];
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 2;
  inline float roll() const;
  inline void set_roll(float value);
  
  // required float yaw = 3 [default = 0];
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 3;
  inline float yaw() const;
  inline void set_yaw(float value);
  
  // @@protoc_insertion_point(class_scope:opencog_msgs.pai_msgs.MapInfo.Rotation)
 private:
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_roll();
  inline void clear_has_roll();
  inline void set_has_yaw();
  inline void clear_has_yaw();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float pitch_;
  float roll_;
  float yaw_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  
  void InitAsDefaultInstance();
  static MapInfo_Rotation* default_instance_;
};
// -------------------------------------------------------------------

class MapInfo_OCProperty : public ::google::protobuf::Message {
 public:
  MapInfo_OCProperty();
  virtual ~MapInfo_OCProperty();
  
  MapInfo_OCProperty(const MapInfo_OCProperty& from);
  
  inline MapInfo_OCProperty& operator=(const MapInfo_OCProperty& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapInfo_OCProperty& default_instance();
  
  void Swap(MapInfo_OCProperty* other);
  
  // implements Message ----------------------------------------------
  
  MapInfo_OCProperty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapInfo_OCProperty& from);
  void MergeFrom(const MapInfo_OCProperty& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:opencog_msgs.pai_msgs.MapInfo.OCProperty)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  
  void InitAsDefaultInstance();
  static MapInfo_OCProperty* default_instance_;
};
// -------------------------------------------------------------------

class MapInfo : public ::google::protobuf::Message {
 public:
  MapInfo();
  virtual ~MapInfo();
  
  MapInfo(const MapInfo& from);
  
  inline MapInfo& operator=(const MapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapInfo& default_instance();
  
  void Swap(MapInfo* other);
  
  // implements Message ----------------------------------------------
  
  MapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapInfo& from);
  void MergeFrom(const MapInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MapInfo_Vector3 Vector3;
  typedef MapInfo_Rotation Rotation;
  typedef MapInfo_OCProperty OCProperty;
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  
  // required .opencog_msgs.pai_msgs.MapInfo.Vector3 position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline const ::opencog_msgs::pai_msgs::MapInfo_Vector3& position() const;
  inline ::opencog_msgs::pai_msgs::MapInfo_Vector3* mutable_position();
  inline ::opencog_msgs::pai_msgs::MapInfo_Vector3* release_position();
  
  // optional .opencog_msgs.pai_msgs.MapInfo.Vector3 velocity = 5;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 5;
  inline const ::opencog_msgs::pai_msgs::MapInfo_Vector3& velocity() const;
  inline ::opencog_msgs::pai_msgs::MapInfo_Vector3* mutable_velocity();
  inline ::opencog_msgs::pai_msgs::MapInfo_Vector3* release_velocity();
  
  // required .opencog_msgs.pai_msgs.MapInfo.Rotation rotation = 6;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 6;
  inline const ::opencog_msgs::pai_msgs::MapInfo_Rotation& rotation() const;
  inline ::opencog_msgs::pai_msgs::MapInfo_Rotation* mutable_rotation();
  inline ::opencog_msgs::pai_msgs::MapInfo_Rotation* release_rotation();
  
  // required float length = 7;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 7;
  inline float length() const;
  inline void set_length(float value);
  
  // required float width = 8;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 8;
  inline float width() const;
  inline void set_width(float value);
  
  // required float height = 9;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 9;
  inline float height() const;
  inline void set_height(float value);
  
  // repeated .opencog_msgs.pai_msgs.MapInfo.OCProperty properties = 10;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 10;
  inline const ::opencog_msgs::pai_msgs::MapInfo_OCProperty& properties(int index) const;
  inline ::opencog_msgs::pai_msgs::MapInfo_OCProperty* mutable_properties(int index);
  inline ::opencog_msgs::pai_msgs::MapInfo_OCProperty* add_properties();
  inline const ::google::protobuf::RepeatedPtrField< ::opencog_msgs::pai_msgs::MapInfo_OCProperty >&
      properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::opencog_msgs::pai_msgs::MapInfo_OCProperty >*
      mutable_properties();
  
  // optional float weight = 11;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 11;
  inline float weight() const;
  inline void set_weight(float value);
  
  // @@protoc_insertion_point(class_scope:opencog_msgs.pai_msgs.MapInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_rotation();
  inline void clear_has_rotation();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_weight();
  inline void clear_has_weight();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* name_;
  ::std::string* type_;
  ::opencog_msgs::pai_msgs::MapInfo_Vector3* position_;
  ::opencog_msgs::pai_msgs::MapInfo_Vector3* velocity_;
  ::opencog_msgs::pai_msgs::MapInfo_Rotation* rotation_;
  float length_;
  float width_;
  ::google::protobuf::RepeatedPtrField< ::opencog_msgs::pai_msgs::MapInfo_OCProperty > properties_;
  float height_;
  float weight_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  
  void InitAsDefaultInstance();
  static MapInfo* default_instance_;
};
// -------------------------------------------------------------------

class MapInfoSeq : public ::google::protobuf::Message {
 public:
  MapInfoSeq();
  virtual ~MapInfoSeq();
  
  MapInfoSeq(const MapInfoSeq& from);
  
  inline MapInfoSeq& operator=(const MapInfoSeq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapInfoSeq& default_instance();
  
  void Swap(MapInfoSeq* other);
  
  // implements Message ----------------------------------------------
  
  MapInfoSeq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapInfoSeq& from);
  void MergeFrom(const MapInfoSeq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .opencog_msgs.pai_msgs.MapInfo mapinfos = 1;
  inline int mapinfos_size() const;
  inline void clear_mapinfos();
  static const int kMapinfosFieldNumber = 1;
  inline const ::opencog_msgs::pai_msgs::MapInfo& mapinfos(int index) const;
  inline ::opencog_msgs::pai_msgs::MapInfo* mutable_mapinfos(int index);
  inline ::opencog_msgs::pai_msgs::MapInfo* add_mapinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::opencog_msgs::pai_msgs::MapInfo >&
      mapinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::opencog_msgs::pai_msgs::MapInfo >*
      mutable_mapinfos();
  
  // @@protoc_insertion_point(class_scope:opencog_msgs.pai_msgs.MapInfoSeq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::opencog_msgs::pai_msgs::MapInfo > mapinfos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  
  void InitAsDefaultInstance();
  static MapInfoSeq* default_instance_;
};
// -------------------------------------------------------------------

class Chunk : public ::google::protobuf::Message {
 public:
  Chunk();
  virtual ~Chunk();
  
  Chunk(const Chunk& from);
  
  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Chunk& default_instance();
  
  void Swap(Chunk* other);
  
  // implements Message ----------------------------------------------
  
  Chunk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chunk& from);
  void MergeFrom(const Chunk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .opencog_msgs.pai_msgs.MapInfo blocks = 1;
  inline int blocks_size() const;
  inline void clear_blocks();
  static const int kBlocksFieldNumber = 1;
  inline const ::opencog_msgs::pai_msgs::MapInfo& blocks(int index) const;
  inline ::opencog_msgs::pai_msgs::MapInfo* mutable_blocks(int index);
  inline ::opencog_msgs::pai_msgs::MapInfo* add_blocks();
  inline const ::google::protobuf::RepeatedPtrField< ::opencog_msgs::pai_msgs::MapInfo >&
      blocks() const;
  inline ::google::protobuf::RepeatedPtrField< ::opencog_msgs::pai_msgs::MapInfo >*
      mutable_blocks();
  
  // @@protoc_insertion_point(class_scope:opencog_msgs.pai_msgs.Chunk)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::opencog_msgs::pai_msgs::MapInfo > blocks_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  
  void InitAsDefaultInstance();
  static Chunk* default_instance_;
};
// ===================================================================


// ===================================================================

// MapInfo_Vector3

// required float x = 1 [default = 0];
inline bool MapInfo_Vector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapInfo_Vector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapInfo_Vector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapInfo_Vector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float MapInfo_Vector3::x() const {
  return x_;
}
inline void MapInfo_Vector3::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2 [default = 0];
inline bool MapInfo_Vector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapInfo_Vector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapInfo_Vector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapInfo_Vector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float MapInfo_Vector3::y() const {
  return y_;
}
inline void MapInfo_Vector3::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3 [default = 0];
inline bool MapInfo_Vector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapInfo_Vector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapInfo_Vector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapInfo_Vector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float MapInfo_Vector3::z() const {
  return z_;
}
inline void MapInfo_Vector3::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// MapInfo_Rotation

// required float pitch = 1 [default = 0];
inline bool MapInfo_Rotation::has_pitch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapInfo_Rotation::set_has_pitch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapInfo_Rotation::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapInfo_Rotation::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline float MapInfo_Rotation::pitch() const {
  return pitch_;
}
inline void MapInfo_Rotation::set_pitch(float value) {
  set_has_pitch();
  pitch_ = value;
}

// required float roll = 2 [default = 0];
inline bool MapInfo_Rotation::has_roll() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapInfo_Rotation::set_has_roll() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapInfo_Rotation::clear_has_roll() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapInfo_Rotation::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline float MapInfo_Rotation::roll() const {
  return roll_;
}
inline void MapInfo_Rotation::set_roll(float value) {
  set_has_roll();
  roll_ = value;
}

// required float yaw = 3 [default = 0];
inline bool MapInfo_Rotation::has_yaw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapInfo_Rotation::set_has_yaw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapInfo_Rotation::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapInfo_Rotation::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline float MapInfo_Rotation::yaw() const {
  return yaw_;
}
inline void MapInfo_Rotation::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
}

// -------------------------------------------------------------------

// MapInfo_OCProperty

// required string key = 1;
inline bool MapInfo_OCProperty::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapInfo_OCProperty::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapInfo_OCProperty::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapInfo_OCProperty::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& MapInfo_OCProperty::key() const {
  return *key_;
}
inline void MapInfo_OCProperty::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void MapInfo_OCProperty::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void MapInfo_OCProperty::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MapInfo_OCProperty::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* MapInfo_OCProperty::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string value = 2;
inline bool MapInfo_OCProperty::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapInfo_OCProperty::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapInfo_OCProperty::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapInfo_OCProperty::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& MapInfo_OCProperty::value() const {
  return *value_;
}
inline void MapInfo_OCProperty::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void MapInfo_OCProperty::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void MapInfo_OCProperty::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MapInfo_OCProperty::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* MapInfo_OCProperty::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MapInfo

// required string id = 1;
inline bool MapInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapInfo::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MapInfo::id() const {
  return *id_;
}
inline void MapInfo::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MapInfo::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MapInfo::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MapInfo::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* MapInfo::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string name = 2;
inline bool MapInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MapInfo::name() const {
  return *name_;
}
inline void MapInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MapInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MapInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MapInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MapInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string type = 3;
inline bool MapInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapInfo::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& MapInfo::type() const {
  return *type_;
}
inline void MapInfo::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void MapInfo::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void MapInfo::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MapInfo::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* MapInfo::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .opencog_msgs.pai_msgs.MapInfo.Vector3 position = 4;
inline bool MapInfo::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapInfo::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MapInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MapInfo::clear_position() {
  if (position_ != NULL) position_->::opencog_msgs::pai_msgs::MapInfo_Vector3::Clear();
  clear_has_position();
}
inline const ::opencog_msgs::pai_msgs::MapInfo_Vector3& MapInfo::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::opencog_msgs::pai_msgs::MapInfo_Vector3* MapInfo::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::opencog_msgs::pai_msgs::MapInfo_Vector3;
  return position_;
}
inline ::opencog_msgs::pai_msgs::MapInfo_Vector3* MapInfo::release_position() {
  clear_has_position();
  ::opencog_msgs::pai_msgs::MapInfo_Vector3* temp = position_;
  position_ = NULL;
  return temp;
}

// optional .opencog_msgs.pai_msgs.MapInfo.Vector3 velocity = 5;
inline bool MapInfo::has_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MapInfo::set_has_velocity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MapInfo::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MapInfo::clear_velocity() {
  if (velocity_ != NULL) velocity_->::opencog_msgs::pai_msgs::MapInfo_Vector3::Clear();
  clear_has_velocity();
}
inline const ::opencog_msgs::pai_msgs::MapInfo_Vector3& MapInfo::velocity() const {
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::opencog_msgs::pai_msgs::MapInfo_Vector3* MapInfo::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) velocity_ = new ::opencog_msgs::pai_msgs::MapInfo_Vector3;
  return velocity_;
}
inline ::opencog_msgs::pai_msgs::MapInfo_Vector3* MapInfo::release_velocity() {
  clear_has_velocity();
  ::opencog_msgs::pai_msgs::MapInfo_Vector3* temp = velocity_;
  velocity_ = NULL;
  return temp;
}

// required .opencog_msgs.pai_msgs.MapInfo.Rotation rotation = 6;
inline bool MapInfo::has_rotation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MapInfo::set_has_rotation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MapInfo::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MapInfo::clear_rotation() {
  if (rotation_ != NULL) rotation_->::opencog_msgs::pai_msgs::MapInfo_Rotation::Clear();
  clear_has_rotation();
}
inline const ::opencog_msgs::pai_msgs::MapInfo_Rotation& MapInfo::rotation() const {
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
inline ::opencog_msgs::pai_msgs::MapInfo_Rotation* MapInfo::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) rotation_ = new ::opencog_msgs::pai_msgs::MapInfo_Rotation;
  return rotation_;
}
inline ::opencog_msgs::pai_msgs::MapInfo_Rotation* MapInfo::release_rotation() {
  clear_has_rotation();
  ::opencog_msgs::pai_msgs::MapInfo_Rotation* temp = rotation_;
  rotation_ = NULL;
  return temp;
}

// required float length = 7;
inline bool MapInfo::has_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MapInfo::set_has_length() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MapInfo::clear_has_length() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MapInfo::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline float MapInfo::length() const {
  return length_;
}
inline void MapInfo::set_length(float value) {
  set_has_length();
  length_ = value;
}

// required float width = 8;
inline bool MapInfo::has_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MapInfo::set_has_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MapInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MapInfo::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float MapInfo::width() const {
  return width_;
}
inline void MapInfo::set_width(float value) {
  set_has_width();
  width_ = value;
}

// required float height = 9;
inline bool MapInfo::has_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MapInfo::set_has_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MapInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MapInfo::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float MapInfo::height() const {
  return height_;
}
inline void MapInfo::set_height(float value) {
  set_has_height();
  height_ = value;
}

// repeated .opencog_msgs.pai_msgs.MapInfo.OCProperty properties = 10;
inline int MapInfo::properties_size() const {
  return properties_.size();
}
inline void MapInfo::clear_properties() {
  properties_.Clear();
}
inline const ::opencog_msgs::pai_msgs::MapInfo_OCProperty& MapInfo::properties(int index) const {
  return properties_.Get(index);
}
inline ::opencog_msgs::pai_msgs::MapInfo_OCProperty* MapInfo::mutable_properties(int index) {
  return properties_.Mutable(index);
}
inline ::opencog_msgs::pai_msgs::MapInfo_OCProperty* MapInfo::add_properties() {
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opencog_msgs::pai_msgs::MapInfo_OCProperty >&
MapInfo::properties() const {
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::opencog_msgs::pai_msgs::MapInfo_OCProperty >*
MapInfo::mutable_properties() {
  return &properties_;
}

// optional float weight = 11;
inline bool MapInfo::has_weight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MapInfo::set_has_weight() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MapInfo::clear_has_weight() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MapInfo::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float MapInfo::weight() const {
  return weight_;
}
inline void MapInfo::set_weight(float value) {
  set_has_weight();
  weight_ = value;
}

// -------------------------------------------------------------------

// MapInfoSeq

// repeated .opencog_msgs.pai_msgs.MapInfo mapinfos = 1;
inline int MapInfoSeq::mapinfos_size() const {
  return mapinfos_.size();
}
inline void MapInfoSeq::clear_mapinfos() {
  mapinfos_.Clear();
}
inline const ::opencog_msgs::pai_msgs::MapInfo& MapInfoSeq::mapinfos(int index) const {
  return mapinfos_.Get(index);
}
inline ::opencog_msgs::pai_msgs::MapInfo* MapInfoSeq::mutable_mapinfos(int index) {
  return mapinfos_.Mutable(index);
}
inline ::opencog_msgs::pai_msgs::MapInfo* MapInfoSeq::add_mapinfos() {
  return mapinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opencog_msgs::pai_msgs::MapInfo >&
MapInfoSeq::mapinfos() const {
  return mapinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::opencog_msgs::pai_msgs::MapInfo >*
MapInfoSeq::mutable_mapinfos() {
  return &mapinfos_;
}

// -------------------------------------------------------------------

// Chunk

// repeated .opencog_msgs.pai_msgs.MapInfo blocks = 1;
inline int Chunk::blocks_size() const {
  return blocks_.size();
}
inline void Chunk::clear_blocks() {
  blocks_.Clear();
}
inline const ::opencog_msgs::pai_msgs::MapInfo& Chunk::blocks(int index) const {
  return blocks_.Get(index);
}
inline ::opencog_msgs::pai_msgs::MapInfo* Chunk::mutable_blocks(int index) {
  return blocks_.Mutable(index);
}
inline ::opencog_msgs::pai_msgs::MapInfo* Chunk::add_blocks() {
  return blocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opencog_msgs::pai_msgs::MapInfo >&
Chunk::blocks() const {
  return blocks_;
}
inline ::google::protobuf::RepeatedPtrField< ::opencog_msgs::pai_msgs::MapInfo >*
Chunk::mutable_blocks() {
  return &blocks_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pai_msgs
}  // namespace opencog_msgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_opencog_5fmsgs_2epai_5fmsgs_2eproto__INCLUDED
