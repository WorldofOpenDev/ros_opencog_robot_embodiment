// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "opencog_msgs.pai_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace opencog_msgs {
namespace pai_msgs {

namespace {

const ::google::protobuf::Descriptor* MapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapInfo_Vector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapInfo_Vector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapInfo_Rotation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapInfo_Rotation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapInfo_OCProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapInfo_OCProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapInfoSeq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapInfoSeq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chunk_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto() {
  protobuf_AddDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "opencog_msgs.pai_msgs.proto");
  GOOGLE_CHECK(file != NULL);
  MapInfo_descriptor_ = file->message_type(0);
  static const int MapInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, weight_),
  };
  MapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapInfo_descriptor_,
      MapInfo::default_instance_,
      MapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapInfo));
  MapInfo_Vector3_descriptor_ = MapInfo_descriptor_->nested_type(0);
  static const int MapInfo_Vector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo_Vector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo_Vector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo_Vector3, z_),
  };
  MapInfo_Vector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapInfo_Vector3_descriptor_,
      MapInfo_Vector3::default_instance_,
      MapInfo_Vector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo_Vector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo_Vector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapInfo_Vector3));
  MapInfo_Rotation_descriptor_ = MapInfo_descriptor_->nested_type(1);
  static const int MapInfo_Rotation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo_Rotation, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo_Rotation, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo_Rotation, yaw_),
  };
  MapInfo_Rotation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapInfo_Rotation_descriptor_,
      MapInfo_Rotation::default_instance_,
      MapInfo_Rotation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo_Rotation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo_Rotation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapInfo_Rotation));
  MapInfo_OCProperty_descriptor_ = MapInfo_descriptor_->nested_type(2);
  static const int MapInfo_OCProperty_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo_OCProperty, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo_OCProperty, value_),
  };
  MapInfo_OCProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapInfo_OCProperty_descriptor_,
      MapInfo_OCProperty::default_instance_,
      MapInfo_OCProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo_OCProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo_OCProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapInfo_OCProperty));
  MapInfoSeq_descriptor_ = file->message_type(1);
  static const int MapInfoSeq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfoSeq, mapinfos_),
  };
  MapInfoSeq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapInfoSeq_descriptor_,
      MapInfoSeq::default_instance_,
      MapInfoSeq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfoSeq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfoSeq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapInfoSeq));
  Chunk_descriptor_ = file->message_type(2);
  static const int Chunk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, blocks_),
  };
  Chunk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Chunk_descriptor_,
      Chunk::default_instance_,
      Chunk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Chunk));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapInfo_descriptor_, &MapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapInfo_Vector3_descriptor_, &MapInfo_Vector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapInfo_Rotation_descriptor_, &MapInfo_Rotation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapInfo_OCProperty_descriptor_, &MapInfo_OCProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapInfoSeq_descriptor_, &MapInfoSeq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Chunk_descriptor_, &Chunk::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_opencog_5fmsgs_2epai_5fmsgs_2eproto() {
  delete MapInfo::default_instance_;
  delete MapInfo_reflection_;
  delete MapInfo_Vector3::default_instance_;
  delete MapInfo_Vector3_reflection_;
  delete MapInfo_Rotation::default_instance_;
  delete MapInfo_Rotation_reflection_;
  delete MapInfo_OCProperty::default_instance_;
  delete MapInfo_OCProperty_reflection_;
  delete MapInfoSeq::default_instance_;
  delete MapInfoSeq_reflection_;
  delete Chunk::default_instance_;
  delete Chunk_reflection_;
}

void protobuf_AddDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033opencog_msgs.pai_msgs.proto\022\025opencog_m"
    "sgs.pai_msgs\"\374\003\n\007MapInfo\022\n\n\002id\030\001 \002(\t\022\014\n\004"
    "name\030\002 \002(\t\022\014\n\004type\030\003 \002(\t\0228\n\010position\030\004 \002"
    "(\0132&.opencog_msgs.pai_msgs.MapInfo.Vecto"
    "r3\0228\n\010velocity\030\005 \001(\0132&.opencog_msgs.pai_"
    "msgs.MapInfo.Vector3\0229\n\010rotation\030\006 \002(\0132\'"
    ".opencog_msgs.pai_msgs.MapInfo.Rotation\022"
    "\016\n\006length\030\007 \002(\002\022\r\n\005width\030\010 \002(\002\022\016\n\006height"
    "\030\t \002(\002\022=\n\nproperties\030\n \003(\0132).opencog_msg"
    "s.pai_msgs.MapInfo.OCProperty\022\016\n\006weight\030"
    "\013 \001(\002\0323\n\007Vector3\022\014\n\001x\030\001 \002(\002:\0010\022\014\n\001y\030\002 \002("
    "\002:\0010\022\014\n\001z\030\003 \002(\002:\0010\032=\n\010Rotation\022\020\n\005pitch\030"
    "\001 \002(\002:\0010\022\017\n\004roll\030\002 \002(\002:\0010\022\016\n\003yaw\030\003 \002(\002:\001"
    "0\032(\n\nOCProperty\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 "
    "\001(\t\">\n\nMapInfoSeq\0220\n\010mapinfos\030\001 \003(\0132\036.op"
    "encog_msgs.pai_msgs.MapInfo\"7\n\005Chunk\022.\n\006"
    "blocks\030\001 \003(\0132\036.opencog_msgs.pai_msgs.Map"
    "Info", 684);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "opencog_msgs.pai_msgs.proto", &protobuf_RegisterTypes);
  MapInfo::default_instance_ = new MapInfo();
  MapInfo_Vector3::default_instance_ = new MapInfo_Vector3();
  MapInfo_Rotation::default_instance_ = new MapInfo_Rotation();
  MapInfo_OCProperty::default_instance_ = new MapInfo_OCProperty();
  MapInfoSeq::default_instance_ = new MapInfoSeq();
  Chunk::default_instance_ = new Chunk();
  MapInfo::default_instance_->InitAsDefaultInstance();
  MapInfo_Vector3::default_instance_->InitAsDefaultInstance();
  MapInfo_Rotation::default_instance_->InitAsDefaultInstance();
  MapInfo_OCProperty::default_instance_->InitAsDefaultInstance();
  MapInfoSeq::default_instance_->InitAsDefaultInstance();
  Chunk::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_opencog_5fmsgs_2epai_5fmsgs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_opencog_5fmsgs_2epai_5fmsgs_2eproto {
  StaticDescriptorInitializer_opencog_5fmsgs_2epai_5fmsgs_2eproto() {
    protobuf_AddDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();
  }
} static_descriptor_initializer_opencog_5fmsgs_2epai_5fmsgs_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MapInfo_Vector3::kXFieldNumber;
const int MapInfo_Vector3::kYFieldNumber;
const int MapInfo_Vector3::kZFieldNumber;
#endif  // !_MSC_VER

MapInfo_Vector3::MapInfo_Vector3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapInfo_Vector3::InitAsDefaultInstance() {
}

MapInfo_Vector3::MapInfo_Vector3(const MapInfo_Vector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapInfo_Vector3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapInfo_Vector3::~MapInfo_Vector3() {
  SharedDtor();
}

void MapInfo_Vector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapInfo_Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapInfo_Vector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapInfo_Vector3_descriptor_;
}

const MapInfo_Vector3& MapInfo_Vector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();  return *default_instance_;
}

MapInfo_Vector3* MapInfo_Vector3::default_instance_ = NULL;

MapInfo_Vector3* MapInfo_Vector3::New() const {
  return new MapInfo_Vector3;
}

void MapInfo_Vector3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapInfo_Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // required float z = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapInfo_Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapInfo_Vector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapInfo_Vector3::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapInfo_Vector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapInfo_Vector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapInfo_Vector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapInfo_Vector3::MergeFrom(const MapInfo_Vector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapInfo_Vector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapInfo_Vector3::CopyFrom(const MapInfo_Vector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapInfo_Vector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MapInfo_Vector3::Swap(MapInfo_Vector3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapInfo_Vector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapInfo_Vector3_descriptor_;
  metadata.reflection = MapInfo_Vector3_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MapInfo_Rotation::kPitchFieldNumber;
const int MapInfo_Rotation::kRollFieldNumber;
const int MapInfo_Rotation::kYawFieldNumber;
#endif  // !_MSC_VER

MapInfo_Rotation::MapInfo_Rotation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapInfo_Rotation::InitAsDefaultInstance() {
}

MapInfo_Rotation::MapInfo_Rotation(const MapInfo_Rotation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapInfo_Rotation::SharedCtor() {
  _cached_size_ = 0;
  pitch_ = 0;
  roll_ = 0;
  yaw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapInfo_Rotation::~MapInfo_Rotation() {
  SharedDtor();
}

void MapInfo_Rotation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapInfo_Rotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapInfo_Rotation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapInfo_Rotation_descriptor_;
}

const MapInfo_Rotation& MapInfo_Rotation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();  return *default_instance_;
}

MapInfo_Rotation* MapInfo_Rotation::default_instance_ = NULL;

MapInfo_Rotation* MapInfo_Rotation::New() const {
  return new MapInfo_Rotation;
}

void MapInfo_Rotation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pitch_ = 0;
    roll_ = 0;
    yaw_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapInfo_Rotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float pitch = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_roll;
        break;
      }
      
      // required float roll = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_yaw;
        break;
      }
      
      // required float yaw = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapInfo_Rotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float pitch = 1 [default = 0];
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pitch(), output);
  }
  
  // required float roll = 2 [default = 0];
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->roll(), output);
  }
  
  // required float yaw = 3 [default = 0];
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapInfo_Rotation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float pitch = 1 [default = 0];
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pitch(), target);
  }
  
  // required float roll = 2 [default = 0];
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->roll(), target);
  }
  
  // required float yaw = 3 [default = 0];
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapInfo_Rotation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float pitch = 1 [default = 0];
    if (has_pitch()) {
      total_size += 1 + 4;
    }
    
    // required float roll = 2 [default = 0];
    if (has_roll()) {
      total_size += 1 + 4;
    }
    
    // required float yaw = 3 [default = 0];
    if (has_yaw()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapInfo_Rotation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapInfo_Rotation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapInfo_Rotation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapInfo_Rotation::MergeFrom(const MapInfo_Rotation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapInfo_Rotation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapInfo_Rotation::CopyFrom(const MapInfo_Rotation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapInfo_Rotation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MapInfo_Rotation::Swap(MapInfo_Rotation* other) {
  if (other != this) {
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(yaw_, other->yaw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapInfo_Rotation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapInfo_Rotation_descriptor_;
  metadata.reflection = MapInfo_Rotation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MapInfo_OCProperty::kKeyFieldNumber;
const int MapInfo_OCProperty::kValueFieldNumber;
#endif  // !_MSC_VER

MapInfo_OCProperty::MapInfo_OCProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapInfo_OCProperty::InitAsDefaultInstance() {
}

MapInfo_OCProperty::MapInfo_OCProperty(const MapInfo_OCProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapInfo_OCProperty::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapInfo_OCProperty::~MapInfo_OCProperty() {
  SharedDtor();
}

void MapInfo_OCProperty::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void MapInfo_OCProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapInfo_OCProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapInfo_OCProperty_descriptor_;
}

const MapInfo_OCProperty& MapInfo_OCProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();  return *default_instance_;
}

MapInfo_OCProperty* MapInfo_OCProperty::default_instance_ = NULL;

MapInfo_OCProperty* MapInfo_OCProperty::New() const {
  return new MapInfo_OCProperty;
}

void MapInfo_OCProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapInfo_OCProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapInfo_OCProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapInfo_OCProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapInfo_OCProperty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapInfo_OCProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapInfo_OCProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapInfo_OCProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapInfo_OCProperty::MergeFrom(const MapInfo_OCProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapInfo_OCProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapInfo_OCProperty::CopyFrom(const MapInfo_OCProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapInfo_OCProperty::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MapInfo_OCProperty::Swap(MapInfo_OCProperty* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapInfo_OCProperty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapInfo_OCProperty_descriptor_;
  metadata.reflection = MapInfo_OCProperty_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MapInfo::kIdFieldNumber;
const int MapInfo::kNameFieldNumber;
const int MapInfo::kTypeFieldNumber;
const int MapInfo::kPositionFieldNumber;
const int MapInfo::kVelocityFieldNumber;
const int MapInfo::kRotationFieldNumber;
const int MapInfo::kLengthFieldNumber;
const int MapInfo::kWidthFieldNumber;
const int MapInfo::kHeightFieldNumber;
const int MapInfo::kPropertiesFieldNumber;
const int MapInfo::kWeightFieldNumber;
#endif  // !_MSC_VER

MapInfo::MapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapInfo::InitAsDefaultInstance() {
  position_ = const_cast< ::opencog_msgs::pai_msgs::MapInfo_Vector3*>(&::opencog_msgs::pai_msgs::MapInfo_Vector3::default_instance());
  velocity_ = const_cast< ::opencog_msgs::pai_msgs::MapInfo_Vector3*>(&::opencog_msgs::pai_msgs::MapInfo_Vector3::default_instance());
  rotation_ = const_cast< ::opencog_msgs::pai_msgs::MapInfo_Rotation*>(&::opencog_msgs::pai_msgs::MapInfo_Rotation::default_instance());
}

MapInfo::MapInfo(const MapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = NULL;
  velocity_ = NULL;
  rotation_ = NULL;
  length_ = 0;
  width_ = 0;
  height_ = 0;
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapInfo::~MapInfo() {
  SharedDtor();
}

void MapInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
    delete position_;
    delete velocity_;
    delete rotation_;
  }
}

void MapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapInfo_descriptor_;
}

const MapInfo& MapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();  return *default_instance_;
}

MapInfo* MapInfo::default_instance_ = NULL;

MapInfo* MapInfo::New() const {
  return new MapInfo;
}

void MapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::opencog_msgs::pai_msgs::MapInfo_Vector3::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::opencog_msgs::pai_msgs::MapInfo_Vector3::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::opencog_msgs::pai_msgs::MapInfo_Rotation::Clear();
    }
    length_ = 0;
    width_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    height_ = 0;
    weight_ = 0;
  }
  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }
      
      // required string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_position;
        break;
      }
      
      // required .opencog_msgs.pai_msgs.MapInfo.Vector3 position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_velocity;
        break;
      }
      
      // optional .opencog_msgs.pai_msgs.MapInfo.Vector3 velocity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rotation;
        break;
      }
      
      // required .opencog_msgs.pai_msgs.MapInfo.Rotation rotation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_length;
        break;
      }
      
      // required float length = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_width;
        break;
      }
      
      // required float width = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_height;
        break;
      }
      
      // required float height = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_properties;
        break;
      }
      
      // repeated .opencog_msgs.pai_msgs.MapInfo.OCProperty properties = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_properties;
        if (input->ExpectTag(93)) goto parse_weight;
        break;
      }
      
      // optional float weight = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }
  
  // required .opencog_msgs.pai_msgs.MapInfo.Vector3 position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->position(), output);
  }
  
  // optional .opencog_msgs.pai_msgs.MapInfo.Vector3 velocity = 5;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->velocity(), output);
  }
  
  // required .opencog_msgs.pai_msgs.MapInfo.Rotation rotation = 6;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rotation(), output);
  }
  
  // required float length = 7;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->length(), output);
  }
  
  // required float width = 8;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->width(), output);
  }
  
  // required float height = 9;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->height(), output);
  }
  
  // repeated .opencog_msgs.pai_msgs.MapInfo.OCProperty properties = 10;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->properties(i), output);
  }
  
  // optional float weight = 11;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->weight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }
  
  // required .opencog_msgs.pai_msgs.MapInfo.Vector3 position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->position(), target);
  }
  
  // optional .opencog_msgs.pai_msgs.MapInfo.Vector3 velocity = 5;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->velocity(), target);
  }
  
  // required .opencog_msgs.pai_msgs.MapInfo.Rotation rotation = 6;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rotation(), target);
  }
  
  // required float length = 7;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->length(), target);
  }
  
  // required float width = 8;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->width(), target);
  }
  
  // required float height = 9;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->height(), target);
  }
  
  // repeated .opencog_msgs.pai_msgs.MapInfo.OCProperty properties = 10;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->properties(i), target);
  }
  
  // optional float weight = 11;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->weight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // required .opencog_msgs.pai_msgs.MapInfo.Vector3 position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // optional .opencog_msgs.pai_msgs.MapInfo.Vector3 velocity = 5;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }
    
    // required .opencog_msgs.pai_msgs.MapInfo.Rotation rotation = 6;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }
    
    // required float length = 7;
    if (has_length()) {
      total_size += 1 + 4;
    }
    
    // required float width = 8;
    if (has_width()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float height = 9;
    if (has_height()) {
      total_size += 1 + 4;
    }
    
    // optional float weight = 11;
    if (has_weight()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .opencog_msgs.pai_msgs.MapInfo.OCProperty properties = 10;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapInfo::MergeFrom(const MapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_position()) {
      mutable_position()->::opencog_msgs::pai_msgs::MapInfo_Vector3::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::opencog_msgs::pai_msgs::MapInfo_Vector3::MergeFrom(from.velocity());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::opencog_msgs::pai_msgs::MapInfo_Rotation::MergeFrom(from.rotation());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapInfo::CopyFrom(const MapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ef) != 0x000001ef) return false;
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  if (has_rotation()) {
    if (!this->rotation().IsInitialized()) return false;
  }
  for (int i = 0; i < properties_size(); i++) {
    if (!this->properties(i).IsInitialized()) return false;
  }
  return true;
}

void MapInfo::Swap(MapInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(rotation_, other->rotation_);
    std::swap(length_, other->length_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    properties_.Swap(&other->properties_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapInfo_descriptor_;
  metadata.reflection = MapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapInfoSeq::kMapinfosFieldNumber;
#endif  // !_MSC_VER

MapInfoSeq::MapInfoSeq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapInfoSeq::InitAsDefaultInstance() {
}

MapInfoSeq::MapInfoSeq(const MapInfoSeq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapInfoSeq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapInfoSeq::~MapInfoSeq() {
  SharedDtor();
}

void MapInfoSeq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapInfoSeq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapInfoSeq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapInfoSeq_descriptor_;
}

const MapInfoSeq& MapInfoSeq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();  return *default_instance_;
}

MapInfoSeq* MapInfoSeq::default_instance_ = NULL;

MapInfoSeq* MapInfoSeq::New() const {
  return new MapInfoSeq;
}

void MapInfoSeq::Clear() {
  mapinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapInfoSeq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .opencog_msgs.pai_msgs.MapInfo mapinfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mapinfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapInfoSeq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .opencog_msgs.pai_msgs.MapInfo mapinfos = 1;
  for (int i = 0; i < this->mapinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapinfos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapInfoSeq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .opencog_msgs.pai_msgs.MapInfo mapinfos = 1;
  for (int i = 0; i < this->mapinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapinfos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapInfoSeq::ByteSize() const {
  int total_size = 0;
  
  // repeated .opencog_msgs.pai_msgs.MapInfo mapinfos = 1;
  total_size += 1 * this->mapinfos_size();
  for (int i = 0; i < this->mapinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapinfos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapInfoSeq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapInfoSeq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapInfoSeq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapInfoSeq::MergeFrom(const MapInfoSeq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapinfos_.MergeFrom(from.mapinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapInfoSeq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapInfoSeq::CopyFrom(const MapInfoSeq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapInfoSeq::IsInitialized() const {
  
  for (int i = 0; i < mapinfos_size(); i++) {
    if (!this->mapinfos(i).IsInitialized()) return false;
  }
  return true;
}

void MapInfoSeq::Swap(MapInfoSeq* other) {
  if (other != this) {
    mapinfos_.Swap(&other->mapinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapInfoSeq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapInfoSeq_descriptor_;
  metadata.reflection = MapInfoSeq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Chunk::kBlocksFieldNumber;
#endif  // !_MSC_VER

Chunk::Chunk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Chunk::InitAsDefaultInstance() {
}

Chunk::Chunk(const Chunk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Chunk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chunk::~Chunk() {
  SharedDtor();
}

void Chunk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Chunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chunk_descriptor_;
}

const Chunk& Chunk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opencog_5fmsgs_2epai_5fmsgs_2eproto();  return *default_instance_;
}

Chunk* Chunk::default_instance_ = NULL;

Chunk* Chunk::New() const {
  return new Chunk;
}

void Chunk::Clear() {
  blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Chunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .opencog_msgs.pai_msgs.MapInfo blocks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_blocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Chunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .opencog_msgs.pai_msgs.MapInfo blocks = 1;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blocks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Chunk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .opencog_msgs.pai_msgs.MapInfo blocks = 1;
  for (int i = 0; i < this->blocks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blocks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Chunk::ByteSize() const {
  int total_size = 0;
  
  // repeated .opencog_msgs.pai_msgs.MapInfo blocks = 1;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chunk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Chunk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Chunk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chunk::MergeFrom(const Chunk& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocks_.MergeFrom(from.blocks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Chunk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chunk::CopyFrom(const Chunk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk::IsInitialized() const {
  
  for (int i = 0; i < blocks_size(); i++) {
    if (!this->blocks(i).IsInitialized()) return false;
  }
  return true;
}

void Chunk::Swap(Chunk* other) {
  if (other != this) {
    blocks_.Swap(&other->blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Chunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chunk_descriptor_;
  metadata.reflection = Chunk_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pai_msgs
}  // namespace opencog_msgs

// @@protoc_insertion_point(global_scope)
